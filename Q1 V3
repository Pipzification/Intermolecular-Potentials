'''
Intermolecular Potentials 2023
Candidate Number: 1538669
Date: 26/4/23
Dependencies: Python 3.9.1
'''

# Imports the required modules

import numpy as np
from collections import defaultdict

# Set the constants (for water)

r = 2.5                                      # Distance (Å)
static = 1.8550                              # Static dipole (Debye)
a = 1.4500                                   # Dipole polarisability (/4pi*vacuum permittivity) (Å^3)

# Opens the required lists and dictionaries

distances = {}            # Dictionary storing the distances between the molecules
mol_list = []             # List of the names of the molecules
induced = {}              # Dictionary for forces
total_induced = {}        # Dictionary for total induced dipole

for j in range(0, 5):

    # Calculates the distances and fills distances dictionary

    r_list = []
    molecule = "molecule{}".format(j)
    mol_list.append(molecule)
    distances["molecule{}".format(j)] = []

    r0 = abs(0 - j * r)
    r1 = abs(r - j * r)
    r2 = abs(2 * r - j * r)
    r3 = abs(3 * r - j * r)
    r4 = abs(4 * r - j * r)

    r_list.extend((r0, r1, r2, r3, r4))

    distances["molecule{}".format(j)].append(r_list)


# The while loop for the iteration

while Energy1 != Energy:

    u_total = static

    for i in range(0, 5):

        # Calculates the induced dipole for each molecule

        induced["molecule{}".format(i)] = []
        total_induced["molecule{}".format(i)] = []
        molec = "molecule{}".format(i)

        id_list = []

        for r in molec:

            InducedDipole = (2 * a * u_total) / (r**3)
            id_list.append(InducedDipole)

        induced["molecule{}".format(i)].append(id_list)
        total_ind = np.sum(id_list)
        total_induced["molecule{}".format(i)].append(total_ind)

    total_dipole = u_total + np.sum(total_dipole.values())

    
